
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566

// ***********************************************************************
//
// Demo program for subject Computer Architectures and Paralel systems
// Petr Olivka, Dept. of Computer Science, FEECS, VSB-TU Ostrava
// email:petr.olivka@vsb.cz
//
// Threads programming example for Linux (10/2016)
// For the propper testing is necessary to have at least 2 cores CPU
//
// ***********************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <sys/time.h>
#include <sys/param.h>
#include <pthread.h>
#include <algorithm>

#define TYPE int
#define DIRECTION true
class task_part
{
public:
    int id;                 // user identification
    int from, length;       // data range
    TYPE *data;             // array
    TYPE max;               // result

    task_part( int myid, int first, int num, TYPE *ptr ) :
        id( myid ), from( first ), length( num ), data( ptr ) {}

    TYPE get_result() { return max; }


    // function search_max search the largest number in part of array
    // from the left (included) up to the right element
    TYPE search_max()
    {
        TYPE max_elem = data[ from ];
        for ( int i = 1; i < length; i++ )
            if ( max_elem < data[ from + i ] )
                max_elem = data[ from + i ];
        return max_elem;
    }


};
class sorter
{
public:
        unsigned int id;                 // user identification
        int begin, end;       // data range
        TYPE *array;             // array
        bool dir;

        sorter( int myid, int first, int last, TYPE *ptr ,bool direct) :
                id( myid ), begin( first ), end( last ), array( ptr ) ,dir(direct){}

        virtual TYPE *sort(bool up)=0;
         ~sorter(){}

};

class insert_sort: public sorter
{
public:

        insert_sort( int myid, int first, int last, TYPE *& ptr ,bool direct) :
            sorter(myid,first,last,ptr,direct) {}

        TYPE* sort(bool up)
        {



            for (int i = this->begin; i < this->end; i++)
                {
                    int j = i + 1;
                    TYPE tmp = array[j];

                    if(up)
                    {
                         while (j > begin && tmp < array[j-1])
                            {
                               array[j] = array[j-1];
                               j--;
                            }
                         array[j] = tmp;

                    }
                    else
                    {
                        while (j > begin && tmp > array[j-1])
                                {
                               array[j] = array[j-1];
                               j--;
                                }
                       array[j] = tmp;

                     }




                }
            return array;

        }


};

void WriteArray(TYPE*arr,int start,int end)
{
    for(int i = start;i<=end;i++)
    {
        printf("%d:%d, ",i,arr[i]);

    }
    printf("\r\n");

}


TYPE * Merge(TYPE* arr1,TYPE*arr2,int start1, int end1, int start2,int end2,bool up)
{

    int current = 0;
    TYPE *merged = new int [end1-start1+1 + end2-start2+1];
  int firstin=start1,secondin=start2;
    if(up)
    {

        while(firstin<=end1&&secondin<=end2)
        {
      //  printf("comparing arr1[%d] = %d < arr2[%d] = %d\n",firstin,arr1[firstin],secondin,arr2[secondin]);
              if(arr1[firstin]<arr2[secondin])
                    {
                        merged[current++] = arr1[firstin++];

                    }
                    else
                    {
                        merged[current++] = arr2[secondin++];

                    }
              //  printf("Merged : %d\n",merged[current-1]);
        }


    }
    else
    {



        while(firstin<=end1&&secondin<=end2)
        {

              if(arr1[firstin]>arr2[secondin])
                    {
                        merged[current++] = arr1[firstin++];

                    }
                    else
                    {
                        merged[current++] = arr2[secondin++];

                    }

        }






    }

        while(secondin<=end2)
        {
            merged[current++] = arr2[secondin++];
        }

        while(firstin<=end1)
        {
            merged[current++] = arr1[firstin++];
        }

    return merged;
}





// Thread will search the largest element in array
// from element arg->from with length of arg->length.
// Result will be stored to arg->max.
void *my_thread( void *void_arg )
{
    task_part *ptr_task = ( task_part * ) void_arg;

    printf( "Thread %d started from %d with length %d...\n",
        ptr_task->id, ptr_task->from, ptr_task->length );

    ptr_task->max = ptr_task->search_max();

    printf( "Found maximum in thread %d is %d\n", ptr_task->id, ptr_task->max );

    return NULL;
}

void *gen_arr( void *void_arg )
{
    insert_sort*ptr_task = ( insert_sort * ) void_arg;

    printf( "Thread %d started from %d to %d...\n",
        ptr_task->id, ptr_task->begin, ptr_task->end );
    unsigned int seednum = ptr_task->id+ptr_task->begin+ ptr_task->end;
    for(int i=ptr_task->begin;i<=ptr_task->end;i++)
    {
        ptr_task->array[i] = rand_r(&seednum) % 1000 -500;

    }


    return NULL;
}
void *transfer_arr( void *void_arg )
{
    insert_sort*ptr_task = ( insert_sort * ) void_arg;

    printf( "Thread %d started from %d to %d...\n",
        ptr_task->id, ptr_task->begin, ptr_task->end );
    unsigned int seednum = ptr_task->id+ptr_task->begin+ ptr_task->end;
    for(int i=ptr_task->begin;i<=ptr_task->end;i++)
    {
        ptr_task->array[i] = ptr_task->array[i];

    }


    return NULL;
}


void *sort_arr( void *void_arg )
{
    insert_sort*ptr_task = ( insert_sort * ) void_arg;

    printf( "Thread %d started sorting from %d to %d...\n",
        ptr_task->id, ptr_task->begin, ptr_task->end );

    ptr_task->sort(ptr_task->dir);


    return NULL;
}




TYPE* MultiMerge(insert_sort** arrays,int pthread_num)
{

    TYPE* multimerged = arrays[0]->array;
    /*
        multimerged = Merge(multimerged,arrays[1],starts[0],ends[0] ,starts[1],ends[1]);
        multimerged = Merge(multimerged,arrays[2],starts[0],ends[1] ,starts[2],ends[2]);
        multimerged = Merge(multimerged,arrays[3],starts[0],ends[2] ,starts[3],ends[3]);
        multimerged = Merge(multimerged,arrays[4],starts[0],ends[3] ,starts[4],ends[4]);*/
         /*printf("%d\t%d\t%d\t%d\n",starts[0],ends[0] ,starts[1],ends[1]);
        printf("%d\t%d\t%d\t%d\n",starts[0],ends[1] ,starts[2],ends[2]);
        printf("%d\t%d\t%d\t%d\n",starts[0],ends[2] ,starts[3],ends[3]);
        printf("%d\t%d\t%d\t%d\n",starts[0],ends[3] ,starts[4],ends[4]);*/
    for(int i = 0;i<pthread_num-1;i++)
    {
        //printf("TEST:\t%d\t%d\t%d\t%d\n",arrays[0]->begin,arrays[i]->end ,arrays[i+1]->begin,arrays[i+1]->end);
        //printf("Merging "); WriteArray(multimerged,arrays[0]->begin,arrays[i]->end);
        //printf(" AND "); WriteArray(arrays[i+1]->array,arrays[i+1]->begin,arrays[i+1]->end);

        multimerged = Merge(multimerged,arrays[i+1]->array,arrays[0]->begin,arrays[i]->end ,arrays[i+1]->begin,arrays[i+1]->end,arrays[0]->dir);

    }

    return multimerged;

}
void GenerateIndexes(TYPE*source,insert_sort**& arr,int arrlength,int&threadcount,bool dir,bool gen)
{
    printf("Length %d sorted by %d threads\n",arrlength,threadcount);
     if(threadcount>arrlength)
    {
        threadcount=arrlength;
    }
    int**indexes = new int*[2];
    for(int i =0;i<2;i++)
    {
        indexes[i] =new int [threadcount];
    }

    int part = arrlength/threadcount;
    int real = part;
    int first=0,last = 0;
    pthread_t *threads = new pthread_t[threadcount];
    for(int i = 0;i<threadcount;i++)
    {
        if(i<arrlength%threadcount)
        {
            real = part+1;
        }
        else
        {
            real = part;
        }
        last = first + real-1;
        indexes[0][i] = first;
        indexes[1][i] = last;
         //printf("%d - %d\n",first,last);
        arr[i] = new insert_sort(i,first,last,source,dir);
        //arr[i] = sort(source,first,last);

        if(gen)
        {
            pthread_create(&threads[i],NULL,gen_arr,arr[i]);

        }
        else
        {
            pthread_create(&threads[i],NULL,transfer_arr,arr[i]);

        }
        //WriteArray(arr[i],first,last);



        first +=real;
    }
    for(int i =0;i<threadcount;i++)
    {

        pthread_join(threads[i],NULL);
    }


}

// Time interval between two measurements
int timeval_to_ms( timeval *before, timeval *after )
{
    timeval res;
    timersub( after, before, &res );
    return 1000 * res.tv_sec + res.tv_usec / 1000;
}

#define LENGTH_LIMIT 10000000

int main( int na, char **arg )
{
    // The number of elements must be used as program argument
    if ( na != 2 && na!=3)
    {
        //printf( "Specify number of elements, at least %d.\n", LENGTH_LIMIT );
        printf( "Argument error.\n" );
        return 0;
    }
    int my_length = atoi( arg[ 1 ] );
    int threadcount = atoi(arg[2]);
 /*  if ( my_length < LENGTH_LIMIT )
    {
        printf( "The number of elements must be at least %d.\n", LENGTH_LIMIT );
        return 0;
    }*/

    // array allocation
    TYPE *my_array = new TYPE [ my_length ];
    if ( !my_array )
    {
        printf( "Not enough memory for array!\n" );
        return 1;
    }

    // Initialization of random number generator
    srand( ( int ) time( NULL ) );

    printf( "Random numbers generetion started..." );
    for ( int i = 0; i < my_length; i++ )
    {
            my_array[ i ] = rand() % ( my_length * 10 );
            if ( !( i % LENGTH_LIMIT ) )
            {
                printf( "." );
                fflush( stdout );
            }
    }

    printf( "\nMaximum number search using two threads...\n" );
    pthread_t pt1, pt2;
    task_part tp1( 1, 0, my_length / 2, my_array );
    task_part tp2( 2, my_length / 2, my_length - my_length / 2, my_array );
    timeval time_before, time_after;

    // Time recording before searching
    gettimeofday( &time_before, NULL );


    // Threads starting
    pthread_create( &pt1, NULL, my_thread, &tp1 );
    pthread_create( &pt2, NULL, my_thread, &tp2 );

    // Waiting for threads completion
    pthread_join( pt1, NULL );
    pthread_join( pt2, NULL );

    // Time recording after searching
    gettimeofday( &time_after, NULL );

    printf( "The found maximum: %d\n", MAX( tp1.get_result(), tp2.get_result() ) );
    printf( "The search time: %d [ms]\n", timeval_to_ms( &time_before, &time_after ) );

    printf( "\nMaximum number search using one thread...\n" );

    gettimeofday( &time_before, NULL );

    // Searching in single thread
    task_part single( 333, 0, my_length, my_array );
    TYPE res = single.search_max();

    gettimeofday( &time_after, NULL );

    printf( "The found maximum: %d\n", res );
    printf( "The search time: %d [ms]\n", timeval_to_ms( &time_before, &time_after ) );
//___________________________________________________

    TYPE *arrtosort = new TYPE[my_length];
    TYPE* arrtosinglesort = new TYPE[my_length];
for(int i = 0;i<my_length;i++)
{
    arrtosort[i] = i%2==0?i:my_length-i;
    arrtosinglesort[i] = arrtosort[i];
}

  /*  int partlength = my_length/2;
    pthread_t thr1, thr2;
    insert_sort part1( 1, 0, 0+partlength-1, arrtosort );
    insert_sort part2( 2, 0+partlength, my_length-1 , arrtosort);
    printf("Range %d %d\n",part1.begin,part1.end);
    printf("Range %d %d\n",part2.begin,part2.end);

    // Threads starting
     pthread_create( &thr1, NULL, gen_arr, &part1 );
     pthread_create( &thr2, NULL, gen_arr, &part2 );
     // Waiting for threads completion
         pthread_join( thr1, NULL );
         pthread_join( thr2, NULL );
         WriteArray(part1.array,part1.begin,part1.end);
         WriteArray(part2.array,part2.begin,part2.end);
         //WriteArray(arrtosort,0,my_length-1);

         part1.sort(true);
         part2.sort(true);
         printf("________________________________\n");
         WriteArray(part1.array,part1.begin,part1.end);
         WriteArray(part2.array,part2.begin,part2.end);
        // WriteArray(arrtosort,0,my_length-1);

         printf("________________________________\n");
TYPE*merge = Merge(part1.array,part2.array,part1.begin,part1.end,part2.begin,part2.end);
WriteArray(merge,0,my_length-1);
*/
printf("\n\nInitial:\n");
//WriteArray(arrtosort,0,my_length-1);
insert_sort** parts = new insert_sort*[threadcount];
GenerateIndexes(arrtosort,parts,my_length,threadcount,DIRECTION,true);
for(int i = 0;i<my_length;i++)
{
    arrtosinglesort[i] = arrtosort[i];
}
insert_sort singler(-1,0,my_length-1,arrtosinglesort,DIRECTION);
printf("Generated:\n");
//WriteArray(arrtosort,0,my_length-1);


timeval aftersort,foresort,afterthr,forethr;
gettimeofday(&forethr,NULL);
printf("Sorting %d elements by %d threads started:\n",my_length,threadcount);
pthread_t * threads = new pthread_t[threadcount];

for(int i = 0;i<threadcount;i++)
{
    pthread_create(&threads[i],NULL,sort_arr,parts[i]);

}

for(int i = 0;i<threadcount;i++)
{
    pthread_join(threads[i],NULL);

}
TYPE*sortedup = MultiMerge(parts,threadcount);
gettimeofday(&afterthr,NULL);

printf("Sorted %d elements by %d threads in %d milisecs\n",my_length,threadcount,timeval_to_ms(&forethr,&afterthr));
//WriteArray(sortedup,0,my_length-1);
gettimeofday(&foresort,NULL);
printf("Sorting %d elements singlethread started:\n",my_length);
TYPE*singlesortup =singler.sort(singler.dir);
//WriteArray(singlesortup,0,my_length-1);
gettimeofday(&aftersort,NULL);
printf("Sorted %d elements singlethread in %d milisecs\n",my_length,timeval_to_ms(&foresort,&aftersort));



//__________________________________________________________________
printf("\n\n\nREVERSING DIRECTION__________________________________________\n\n\n");
//WriteArray(sortedup,0,my_length-1);
GenerateIndexes(sortedup,parts,my_length,threadcount,!DIRECTION,false);
printf("Initial:\n");
//WriteArray(sortedup,0,my_length-1);
printf("Sorting %d elements by %d threads started:\n",my_length,threadcount);
gettimeofday(&forethr,NULL);
for(int i = 0;i<threadcount;i++)
{
   // printf("%s\n",parts[i]->dir);
    pthread_create(&threads[i],NULL,sort_arr,parts[i]);
    //WriteArray(parts[i]->array,parts[i]->begin,parts[i]->end);
}

for(int i = 0;i<threadcount;i++)
{
    pthread_join(threads[i],NULL);

}
//WriteArray(sortedup,0,my_length-1);
TYPE*sorteddown = MultiMerge(parts,threadcount);
gettimeofday(&afterthr,NULL);
printf("Sorted %d elements by %d threads in %d milisecs\n",my_length,threadcount,timeval_to_ms(&forethr,&afterthr));
//WriteArray(sorteddown,0,my_length-1);

gettimeofday(&foresort,NULL);
printf("Sorting %d elements singlethread started:\n",my_length);
TYPE*singlesortdown =singler.sort(!singler.dir);
//WriteArray(singlesortdown,0,my_length-1);
gettimeofday(&aftersort,NULL);
printf("Sorted %d elements singlethread in %d milisecs\n",my_length,timeval_to_ms(&foresort,&aftersort));


printf("END__________________________________________\n");


for(int i = 0;i<threadcount;i++)
{
    delete parts[i];
}
delete[] parts;
delete[] arrtosort;
//delete[] arrtosinglesort;
delete[] sortedup;
delete[] sorteddown;
delete[] singlesortup;
//delete[] singlesortdown;

return 0;
}
